(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{582:function(_,v,e){"use strict";e.r(v);var t=e(6),a=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"_1、前端缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、前端缓存"}},[_._v("#")]),_._v(" 1、前端缓存")]),_._v(" "),e("blockquote",[e("p",[_._v("当第一次访问网站时,电脑会把网站上图片与数据下载到电脑上,当我们再次访问该网站时,网站就会从电脑中直接加载出来,这就是缓存")]),_._v(" "),e("ul",[e("li",[_._v("web缓存是指一个Web资源(如html页面、图、JS等)存在于web服务器和客户端(浏览器)之间的副本")]),_._v(" "),e("li",[_._v("缓存会根据进来的请求保存输出内容的副本: 当下一个请求来到的时候,如果是相同的Url,缓存会根据缓存机制决定是直接使用副本响应访问请求还是像源服务器再次发起请求")])])]),_._v(" "),e("h3",{attrs:{id:"i-缓存有哪些好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#i-缓存有哪些好处"}},[_._v("#")]),_._v(" Ⅰ - 缓存有哪些好处")]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("缓解服务端压力,不用每次都去请求某些数据")]),_._v(" "),e("li",[_._v("提升性能,打开本地资源肯定比请求服务器来的更快")]),_._v(" "),e("li",[_._v("减少宽带消耗,当我们使用缓存的时候,只会产生很小的网络消耗,至于为什么打开本地资源也会产生网络消耗?")])])]),_._v(" "),e("h3",{attrs:{id:"ii-前端缓存种类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ii-前端缓存种类"}},[_._v("#")]),_._v(" Ⅱ - 前端缓存种类")]),_._v(" "),e("blockquote",[e("ol",[e("li",[_._v("数据库缓存")]),_._v(" "),e("li",[_._v("CDN缓存")]),_._v(" "),e("li",[_._v("代理服务器缓存")]),_._v(" "),e("li",[_._v("浏览器缓存")])])]),_._v(" "),e("h2",{attrs:{id:"_2、什么是浏览器缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、什么是浏览器缓存策略"}},[_._v("#")]),_._v(" 2、什么是浏览器缓存策略")]),_._v(" "),e("blockquote",[e("p",[_._v("良好的缓存策略可以降低资源的重复加载从而提高页面整体加载速度,通常浏览器缓存策略分为两种结果")]),_._v(" "),e("ul",[e("li",[_._v("强缓存")]),_._v(" "),e("li",[_._v("协商缓存")])])]),_._v(" "),e("h3",{attrs:{id:"i-基本原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#i-基本原理"}},[_._v("#")]),_._v(" Ⅰ - 基本原理")]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("浏览器在加载资源时,根据请求头的 "),e("code",[_._v("Expires(过期时间)")]),_._v(" 和"),e("code",[_._v("cache-control(缓存控制)")]),_._v("判断是否命中强缓存,命中则直接从缓存中读取资源,不会发送到服务器")]),_._v(" "),e("li",[_._v("如果没有命中强缓存,浏览器一定会发送一个请求到服务器,通过"),e("code",[_._v("last-modified")]),_._v("和"),e("code",[_._v("etag")]),_._v("验证资源是否命中协商缓存,如果命中,服务器回将这个请求返回,但是不会返回这个资源的数据,依然是从缓存中读取资源")]),_._v(" "),e("li",[_._v("如果前面两者都没有命中,则直接从服务器加载资源")])])]),_._v(" "),e("h3",{attrs:{id:"ii-根据什么规则缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ii-根据什么规则缓存"}},[_._v("#")]),_._v(" Ⅱ - 根据什么规则缓存")]),_._v(" "),e("blockquote",[e("ol",[e("li",[e("strong",[_._v("新鲜度")]),_._v("(过期机制):也就是缓存副本有效期. 一个缓存副本必须满足以下条件,浏览器会认为它是有效的,足够新的")])]),_._v(" "),e("ul",[e("li",[_._v("含有完整的过期时间控制头信息(HTTP协议报头),并且仍在有效期内")]),_._v(" "),e("li",[_._v("浏览器已经使用过这个缓存副本,并且在一个会话中已经检查过新鲜度")]),_._v(" "),e("li",[e("strong",[_._v("通常是强缓存阶段使用的机制")])])]),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[_._v("校验值")]),_._v("(验证机制): 服务器返回资源的时候有时在控制头信息带上这个资源的实体标签"),e("code",[_._v("Etag")]),_._v(",")])]),_._v(" "),e("ul",[e("li",[_._v("它可以用来作为浏览器再次请求过程的校验标识")]),_._v(" "),e("li",[_._v("如果发现校验标识不匹配,说明资源已经被修改或者过期,浏览器需要重新获取资源内容")]),_._v(" "),e("li",[e("strong",[_._v("所以通常是协商缓存中使用的机制")])])])]),_._v(" "),e("h3",{attrs:{id:"iii-http缓存的两个阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iii-http缓存的两个阶段"}},[_._v("#")]),_._v(" Ⅲ - HTTP缓存的两个阶段")]),_._v(" "),e("blockquote",[e("p",[_._v("浏览器缓存一般分为两类: "),e("strong",[_._v("强缓存")]),_._v("(也称本地缓存) 和 "),e("strong",[_._v("协商缓存")]),_._v("(也称弱缓存)")]),_._v(" "),e("h6",{attrs:{id:"强缓存阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存阶段"}},[_._v("#")]),_._v(" 强缓存阶段")]),_._v(" "),e("blockquote",[e("p",[_._v("浏览器发送请求前,会去缓存里查看是否命中强缓存,如果命中,则直接从缓存中读取资源,不会发送请求到服务器;")])]),_._v(" "),e("h6",{attrs:{id:"协商缓存阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存阶段"}},[_._v("#")]),_._v(" 协商缓存阶段")]),_._v(" "),e("blockquote",[e("p",[_._v("当强缓存没有命中时,浏览器一定会向服务器发起请求")])]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("服务器会根据 "),e("code",[_._v("request header")]),_._v(" 中的一些字段来判断是否命中协商缓存")]),_._v(" "),e("li",[_._v("如果命中,服务端会返回304响应,但是不会携带任何响应实体,只是高速浏览器可以直接从浏览器缓存中获取这个资源")]),_._v(" "),e("li",[_._v("如果 "),e("strong",[_._v("强缓存")]),_._v(" 和 "),e("strong",[_._v("协商缓存")]),_._v(" 都没有命中,则直接从服务器加载资源")])])])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://postimg.cc/878rH2Wz",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://i.postimg.cc/sgx9Vyg7/image-20211027190616969.png",alt:"image-20211027190616969.png"}}),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"iv-优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iv-优先级"}},[_._v("#")]),_._v(" Ⅳ - 优先级")]),_._v(" "),e("blockquote",[e("ul",[e("li",[e("code",[_._v("Cache-Control")]),_._v("优先级大于 "),e("code",[_._v("expires")])]),_._v(" "),e("li",[e("code",[_._v("Etag")]),_._v(" 优先级大于 "),e("code",[_._v("last - Modified/if-Modified-since")]),_._v(",同时存在时会以Etag为准")])])]),_._v(" "),e("h3",{attrs:{id:"v-浏览器缓存流程图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-浏览器缓存流程图"}},[_._v("#")]),_._v(" Ⅴ - 浏览器缓存流程图")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://postimg.cc/kR6BNsgS",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://i.postimg.cc/6qznX1sM/image-20211027190721706.png",alt:"image-20211027190721706.png"}}),e("OutboundLink")],1)]),_._v(" "),e("h2",{attrs:{id:"_3、强缓存与协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、强缓存与协商缓存"}},[_._v("#")]),_._v(" 3、强缓存与协商缓存")]),_._v(" "),e("h3",{attrs:{id:"i-强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#i-强缓存"}},[_._v("#")]),_._v(" Ⅰ - 强缓存")]),_._v(" "),e("blockquote",[e("h6",{attrs:{id:"通过expires-过yu期-和cache-control-缓存控制器-两种响应头实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过expires-过yu期-和cache-control-缓存控制器-两种响应头实现"}},[_._v("#")]),_._v(" 通过"),e("code",[_._v("Expires(过yu期)")]),_._v("和"),e("code",[_._v("cache-control(缓存控制器)")]),_._v("两种响应头实现")]),_._v(" "),e("p",[_._v("浏览器在加载资源时,根据请求头的 "),e("code",[_._v("Expires(过期时间)")]),_._v(" 和"),e("code",[_._v("chche-control(缓存控制)")]),_._v("判断是否命中强缓存,命中则直接从缓存中读取资源,不会发送到服务器")])]),_._v(" "),e("h4",{attrs:{id:"_1-expires-过期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-expires-过期"}},[_._v("#")]),_._v(" ①  Expires(过期)")]),_._v(" "),e("blockquote",[e("p",[e("code",[_._v("Expires")]),_._v("是 http1.0 提出的表示资源过期时间的header, 它描述的是一个绝对时间,由服务端返回;当我们准备再次发起请求时,本地时间未超过这个设置的时间,那么就不会真正的发出请求,而是读取缓存")]),_._v(" "),e("p",[_._v("expires受限于本地时间,如果修改了本地时间,可能会造成缓存失效")])]),_._v(" "),e("h4",{attrs:{id:"_2-cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-cache-control"}},[_._v("#")]),_._v(" ②  cache-control")]),_._v(" "),e("blockquote",[e("p",[e("code",[_._v("cache-control")]),_._v("出现于HTTP1.1, 优先级高于Expires ,表示的是相对时间")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("cache-control:no-cache")]),_._v(" 的响应实际上是可以存储在本地缓存去中的,只是在与原始服务器进行新鲜度再验证之前,缓存不能将其提供给客户端使用")]),_._v(" "),e("li",[e("code",[_._v("Cache-Control: no-store")]),_._v(" 真正的不缓存到本地")]),_._v(" "),e("li",[e("code",[_._v("Cache-Control: public")]),_._v(" 可以被所有用户缓存(多用户共享),包括终端和CDN等中间代理服务器")]),_._v(" "),e("li",[e("code",[_._v("Cache-Control: private")]),_._v("只能被终端浏览器缓存（而且是私有缓存），不允许中继缓存服务器进行缓存")])]),_._v(" "),e("p",[_._v("Cache-Control除了在响应中使用，在请求中也可以使用。我们用开发者工具来模拟下请求时带上Cache-Control：勾选Disable cache，刷新页面，可以看到Request Headers中有个字段Cache-Control: no-cache。")])]),_._v(" "),e("h3",{attrs:{id:"ii-协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ii-协商缓存"}},[_._v("#")]),_._v(" Ⅱ - 协商缓存")]),_._v(" "),e("blockquote",[e("h6",{attrs:{id:"协商缓存是通过【last-modified-if-modified-since】和【etag、if-none-match】这两对header来管理的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存是通过【last-modified-if-modified-since】和【etag、if-none-match】这两对header来管理的"}},[_._v("#")]),_._v(" 协商缓存是通过"),e("code",[_._v("【Last-Modified，If-Modified-Since】")]),_._v("和"),e("code",[_._v("【ETag、If-None-Match】")]),_._v("这两对Header来管理的")]),_._v(" "),e("ul",[e("li",[_._v("当浏览器对某个资源的请求没有命中强缓存(换句话说就是: "),e("strong",[_._v("强缓存失效后")]),_._v(")")]),_._v(" "),e("li",[_._v("就会发一个请求到服务器,验证协商缓存是否命中;")]),_._v(" "),e("li",[_._v("如果协商缓存命中,请求响应返回的http状态为"),e("code",[_._v("304")]),_._v(" 并且会显示一个"),e("code",[_._v("Not Modified(未修改的)")]),_._v("的字符串")])])]),_._v(" "),e("h4",{attrs:{id:"_1-last-modified-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-last-modified-if-modified-since"}},[_._v("#")]),_._v(" ①  Last-Modified，If-Modified-Since")]),_._v(" "),e("blockquote",[e("ol",[e("li",[e("code",[_._v("Last-Modified")]),_._v("表示本地文件最后修改日期")])]),_._v(" "),e("ul",[e("li",[_._v("浏览器会在request header 加上 "),e("code",[_._v("If-Modified-Since")]),_._v("(上此返回的"),e("code",[_._v("Last-Modified")]),_._v("的值)")]),_._v(" "),e("li",[_._v("询问服务器在该日期后资源是否有更新")]),_._v(" "),e("li",[_._v("有更新的话就会将新的资源发送过来")])]),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[_._v("但如果在本地打开缓存文件,就会造成"),e("code",[_._v("Last-Modified")]),_._v("的修改,所以在HTTP1.1中出现了"),e("code",[_._v("Etag")])]),_._v(" "),e("li",[_._v("当资源过期时（使用"),e("code",[_._v("Cache-Control")]),_._v("标识的max-age/s-maxage）")])]),_._v(" "),e("ul",[e("li",[_._v("发现资源具有"),e("code",[_._v("Last-Msodified")]),_._v("声明，则向服务器请求时带上头 "),e("code",[_._v("If-Modified-Since")]),_._v("（即响应头中的"),e("code",[_._v("Last-Modified")]),_._v("值），表示请求时间。")]),_._v(" "),e("li",[_._v("这个时候服务器收到请求后发现有头"),e("code",[_._v("If-Modified-Since")]),_._v("则与"),e("strong",[_._v("被请求资源")]),_._v("的最后修改时间进行比对")]),_._v(" "),e("li",[_._v("若最后修改时间较新，说明资源有被改动过，将新资源返回并返回状态"),e("code",[_._v("200")]),_._v("，否则返回"),e("code",[_._v("304")]),_._v("表示资源没被更新使用缓存即可。")])])]),_._v(" "),e("h4",{attrs:{id:"_2-etag、if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-etag、if-none-match"}},[_._v("#")]),_._v(" ② ETag、If-None-Match")]),_._v(" "),e("blockquote",[e("ol",[e("li",[e("code",[_._v("Etag")]),_._v("就行是一个直问,资源变化都会导致Etag变化,跟最后修改时间没有关系,Etag可以保证每一个资源都是唯一的")]),_._v(" "),e("li",[_._v("当资源过期时（使用Cache-Control标识的max-age/s-maxage）")])]),_._v(" "),e("ul",[e("li",[_._v("发现资源具有"),e("code",[_._v("Etage")]),_._v("声明，则向服务器请求时带上头"),e("code",[_._v("If-None-Match")]),_._v("（即响应头中"),e("code",[_._v("Etag")]),_._v("的值）")]),_._v(" "),e("li",[_._v("服务器收到请求后发现有头"),e("code",[_._v("If-None-Match")]),_._v(" 则与被请求资源的相应校验串进行比对")]),_._v(" "),e("li",[_._v("决定返回200或304（"),e("strong",[_._v("注意：服务器会优先验证If-None-Match")]),_._v("）")])]),_._v(" "),e("h6",{attrs:{id:"两者优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两者优先级"}},[_._v("#")]),_._v(" 两者优先级?")]),_._v(" "),e("blockquote",[e("p",[e("strong",[e("code",[_._v("ETag")]),_._v("的优先级比"),e("code",[_._v("Last-Modified")]),_._v("更高")])]),_._v(" "),e("p",[_._v("具体为什么要用"),e("code",[_._v("ETag")]),_._v("，主要出于下面几种情况考虑：")]),_._v(" "),e("ul",[e("li",[_._v("一些文件也许会周期性的更改,但是它的内容并不会改变(仅仅只改变了修改时间),这种时候我们并不希望客户端认为这个文件被修改了,而重新GET")]),_._v(" "),e("li",[_._v("某些文件修改非常频繁,比如在秒以下的时间内进行修改(比如说1s内修改了N次),而其他方法检查到的粒度是s级的,这种修改无法判断")]),_._v(" "),e("li",[_._v("某些服务器不能精确的得到文件的最后修改时间")])])])]),_._v(" "),e("h3",{attrs:{id:"iii-强缓存与协商缓存简单异同点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iii-强缓存与协商缓存简单异同点"}},[_._v("#")]),_._v(" Ⅲ -强缓存与协商缓存简单异同点")]),_._v(" "),e("blockquote",[e("ul",[e("li",[e("strong",[_._v("相同点")]),_._v(": 如果命中,都是从客户端缓存中加载资源,而不是从服务器加载资源数据")]),_._v(" "),e("li",[e("strong",[_._v("不同点")]),_._v(": 强缓存不发送请求到服务器,协商缓存会发送请求到服务器")])])]),_._v(" "),e("h2",{attrs:{id:"_4、常见几种状态码的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、常见几种状态码的区别"}},[_._v("#")]),_._v(" 4、常见几种状态码的区别")]),_._v(" "),e("blockquote",[e("p",[_._v("缓存中: 200状态码总是强缓存, 304总是协商缓存")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("200")]),_._v(": 强缓存"),e("code",[_._v("expires/Cache-Control")]),_._v("失效时,返回新的资源文件")]),_._v(" "),e("li",[e("code",[_._v("200(form cache)")]),_._v(": 强缓存两者都存在且未过期; "),e("code",[_._v("Cache-Control")]),_._v(" 优先"),e("code",[_._v("Expirs")]),_._v("(默认就是这个优先级)时--\x3e浏览器从本地获取资源成功  (这个状态还能更详细分类,在下面再给出详解)")]),_._v(" "),e("li",[e("code",[_._v("304(Not Modified)")]),_._v(":协商缓存"),e("code",[_._v("Last-modified/Etag")]),_._v("没有过期时,服务端返回状态码304")])])]),_._v(" "),e("h2",{attrs:{id:"_5、缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、缓存位置"}},[_._v("#")]),_._v(" 5、缓存位置")]),_._v(" "),e("blockquote",[e("h6",{attrs:{id:"强缓存我们会把资源放在-memory-cache-内存缓存-和disk-cache-磁盘缓存-中-那么他们的区别在哪呢-为何要如此区分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存我们会把资源放在-memory-cache-内存缓存-和disk-cache-磁盘缓存-中-那么他们的区别在哪呢-为何要如此区分"}},[_._v("#")]),_._v(" 强缓存我们会把资源放在 "),e("code",[_._v("memory cache(内存缓存)")]),_._v("和"),e("code",[_._v("disk cache(磁盘缓存)")]),_._v(" 中,那么他们的区别在哪呢?为何要如此区分?")]),_._v(" "),e("ul",[e("li",[_._v("存储图像和网页等资源主要存储在"),e("code",[_._v("disk cache(磁盘存储)")])]),_._v(" "),e("li",[_._v("操作系统缓存文件等资源大部分都会缓存在"),e("code",[_._v("memory cache")]),_._v("中")]),_._v(" "),e("li",[_._v("具体操作浏览器自动分配,看谁的资源利用率不高就给谁")]),_._v(" "),e("li",[_._v("查找浏览器缓存时会按照 "),e("code",[_._v("Service Worker")]),_._v(" --\x3e "),e("code",[_._v("Memory Cache")]),_._v(" --\x3e "),e("code",[_._v("Disk Cache")]),_._v(" --\x3e  "),e("code",[_._v("Push Cache")])])])]),_._v(" "),e("h3",{attrs:{id:"i-service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#i-service-worker"}},[_._v("#")]),_._v(" Ⅰ -  Service Worker")]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("是运行在浏览器背后的独立线程,一般可以用来实现缓存功能.")]),_._v(" "),e("li",[_._v("使用"),e("code",[_._v("Service Worker")]),_._v(" 的话,因为其中涉及到请求拦截,所以传输协议必须为"),e("code",[_._v("HTTPS")]),_._v("来保障安全")]),_._v(" "),e("li",[e("code",[_._v("Service Worker")]),_._v("的缓存和浏览器其他内建的缓存机制不同,它可以让我们自由控制缓存那些文件,如何匹配缓存、读取缓存,并且缓存时持续性的")])])]),_._v(" "),e("h3",{attrs:{id:"ii-memory-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ii-memory-cache"}},[_._v("#")]),_._v(" Ⅱ - Memory Cache")]),_._v(" "),e("blockquote",[e("ul",[e("li",[e("strong",[_._v("内存中的缓存")]),_._v(": 主要包含的是当前页面中已经抓取到的资源: 例如页面下载的样式、脚本、图片等")]),_._v(" "),e("li",[_._v("读取 "),e("strong",[_._v("内存")]),_._v(" 中的数据肯定比 "),e("strong",[_._v("磁盘")]),_._v(" 的快")]),_._v(" "),e("li",[e("strong",[_._v("内存缓存")]),_._v(" 虽然读取高效,但是缓存持续性很短,会随着进程的释放而释放: 如我们关闭了tab页面 ,内存中的缓存也就被释放了")])])]),_._v(" "),e("h3",{attrs:{id:"iii-disk-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iii-disk-cache"}},[_._v("#")]),_._v(" Ⅲ -  Disk Cache")]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("存储在 "),e("strong",[_._v("硬盘")]),_._v(" 中的缓存,读取速度慢点,但是什么都能存储到磁盘中,比之 "),e("code",[_._v("Memory Cache")]),_._v(" 胜在容量和存储时效性上")]),_._v(" "),e("li",[_._v("在所有浏览器缓存中,"),e("code",[_._v("Disk Cache")]),_._v("覆盖面基本是最大的")]),_._v(" "),e("li",[_._v("他会根据 "),e("code",[_._v("HTTP Header")]),_._v(" 中的字段判断哪些资源需要缓存,哪些资源可以不请求直接使用,哪些资源已经过期需要重新请求")]),_._v(" "),e("li",[_._v("并且即便在跨站点的情况下,相同地址的资源一旦被硬盘缓存下来,就不会再去请求数据,绝大部分数据都来自"),e("code",[_._v("Disk Cache")])]),_._v(" "),e("li",[e("strong",[_._v("磁盘缓存")]),_._v(" 比 "),e("strong",[_._v("内存缓存")]),_._v(" 慢的多")])]),_._v(" "),e("h6",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[_._v("#")]),_._v(" example：")]),_._v(" "),e("blockquote",[e("p",[_._v("从远程 Web 服务器直接提取访问文件可能需要 "),e("strong",[_._v("500毫秒(半秒)")]),_._v(", 那么磁盘访问可能需要 "),e("strong",[_._v("10~20毫秒")]),_._v(" ; 而内存访问可能只需要 "),e("strong",[_._v("100纳秒")]),_._v("; 更高级的还有 "),e("strong",[_._v("L1缓存访问")]),_._v(" 只需要0.5纳秒 (最快和最小的CPU缓存,详见此笔记 "),e("a",{attrs:{href:"https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E7%AE%97%E6%B3%95%E5%8F%8A%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BC%93%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E3%80%81CPU%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0.md#%E5%9B%9Bcpu%E7%9A%84%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"}},[_._v("缓存、内存、CPU知识点解析"),e("OutboundLink")],1),_._v(" )")])])]),_._v(" "),e("h3",{attrs:{id:"iv-prefetch-cache-预取缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iv-prefetch-cache-预取缓存"}},[_._v("#")]),_._v(" Ⅳ -  prefetch cache(预取缓存)")]),_._v(" "),e("blockquote",[e("ul",[e("li",[e("strong",[_._v("link")]),_._v(" 标签带上 "),e("strong",[_._v("prefetch")]),_._v(" ,再次加载时会出现")]),_._v(" "),e("li",[e("code",[_._v("prefetch")]),_._v(" 是 "),e("strong",[_._v("预加载")]),_._v(" 的一种方式: 被标记为 "),e("code",[_._v("prefetch")]),_._v(" 的资源,将会被浏览器在空闲时间加载")])])]),_._v(" "),e("h3",{attrs:{id:"v-push-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-push-cache"}},[_._v("#")]),_._v(" Ⅴ -  Push Cache")]),_._v(" "),e("blockquote",[e("ul",[e("li",[e("code",[_._v("Push Cache(推送缓存)")]),_._v(" 是 "),e("strong",[_._v("HTTP/2")]),_._v(" 中的内容,当以上三种缓存都没有命中时,它才会被使用")]),_._v(" "),e("li",[_._v("它只在 "),e("strong",[_._v("会话 (Session)")]),_._v(" 中存在,一旦会话结束就会被释放,并且缓存时间也会很短暂")]),_._v(" "),e("li",[_._v("在Chrome浏览器中只有 "),e("strong",[_._v("5分钟")]),_._v(" 左右,同时它也并非严格执行HTTP头中的缓存指令")])])]),_._v(" "),e("h3",{attrs:{id:"vi-cpu、内存、硬盘概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vi-cpu、内存、硬盘概述"}},[_._v("#")]),_._v(" Ⅵ -  CPU、内存、硬盘概述")]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("CPU、内存、硬盘都是计算机的主要组成部分")]),_._v(" "),e("li",[e("strong",[_._v("CPU")]),_._v(": 中央处理单元的缩写,也叫做 "),e("code",[_._v("处理器")]),_._v(",是计算机的运算核心和控制核心; 电脑靠CPU来运算、控制. 让电脑各个部件顺利工作,起到协调作用")]),_._v(" "),e("li",[e("strong",[_._v("硬盘")]),_._v(": 存储资料和软件等数据的设备,有容量大、断电数据不丢失的特点")]),_._v(" "),e("li",[e("strong",[_._v("内存")]),_._v(": 负责 "),e("strong",[_._v("硬盘")]),_._v(" 等硬件上的数据与 "),e("strong",[_._v("CPU")]),_._v(" 之间数据的交换处理. 特点是: "),e("code",[_._v("体积小")]),_._v("、"),e("code",[_._v("速度快")]),_._v("、"),e("code",[_._v("有电可存")]),_._v("、"),e("code",[_._v("无电清空")]),_._v(",即电脑在开机状态时内存中可存储数据,关机后将自动清空其中的所有数据")])])]),_._v(" "),e("h2",{attrs:{id:"_6、强缓存有协商缓存的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、强缓存有协商缓存的区别"}},[_._v("#")]),_._v(" 6、强缓存有协商缓存的区别")]),_._v(" "),e("blockquote",[e("p",[_._v("这里再次总结整理一下两者之间的区别")]),_._v(" "),e("ul",[e("li",[_._v("强缓存不发请求到服务端,所以有时候资源更新了浏览器还不知道;")]),_._v(" "),e("li",[_._v("但是协商缓存会发请求到服务器,所以资源是否更新,服务器肯定知道")]),_._v(" "),e("li",[_._v("大部分web服务器都默认开启协商缓存")])])]),_._v(" "),e("h2",{attrs:{id:"_7、刷新对于强缓存和协商缓存的影响"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、刷新对于强缓存和协商缓存的影响"}},[_._v("#")]),_._v(" 7、刷新对于强缓存和协商缓存的影响")]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("当 "),e("code",[_._v("ctrl+F5")]),_._v("强制刷新网页时: 直接从服务器加载, "),e("strong",[_._v("跳过强缓存和协商缓存")])]),_._v(" "),e("li",[_._v("当 f5 刷新网页时,跳过强缓存,但是会检查协商缓存")]),_._v(" "),e("li",[_._v("浏览器地址写入URL并回车: 浏览器发现缓存中有这个文件了,就不用继续请求了,直接去缓存拿 (最快)")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);